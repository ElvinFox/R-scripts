###############################
# parsing BitcoinTalk thread  #
###############################
library('rvest')
library(dplyr)
library(tibble)
library(xml2)
library(stringr)
library(lubridate)   #important library for date manipulations


#   Creating empty DF
#   columns: author, post_date, post_text, Rank, Activity

DF <- data.frame(matrix(ncol = 5, nrow = 0))
x <- c( 'author', 'date', 'text', 'rank', 'activity' )
colnames(DF) <- x

#   search for the number of the last page
input <- 'https://bitcointalk.org/index.php?topic=5056272'        #   <<------  insert here the core url

url <- paste0(input, '.', 0)
BCT <- url %>% read_html() 

pages_data <- BCT %>% 
    html_nodes('.navPages') %>% 
    html_text()  

pages_data <- as.numeric(pages_data)
last_page_number <- max(pages_data, na.rm = TRUE)
max_number_of_posts <- last_page_number*20

minutes <- floor(last_page_number / 60)
seconds <- last_page_number %% 60



#   starting main loop
for ( n in 1 : last_page_number) {
        
            if (n == 1) print( paste0('Estimated time to complete is ~ ', minutes, ' minutes and ', seconds, ' seconds.'  ) ) 
            
        url <- paste0(input, '.', 20*n - 20)
        BCT <- url %>% read_html() 
            
        #   search for the number of views
        views_data <- BCT %>% 
            html_nodes(xpath = '//*[@id="top_subject"]/text()') %>% 
            html_text() 
        
        
        regexp <- gsub(".*Read", "", views_data)
        number_of_views <- as.numeric( gsub("times.*", "", regexp ) )
        
 
        #   search for class of posts
        all_classes <- BCT %>% 
            html_nodes("*") %>% 
            html_attr("class")
       

        messages_on_page <- 20

        pg <- 20

        my_function <- function(){
            

            
            XP <<- '//*[@id="ignmsgbttns561"]' #  <- number just a remark how the idea came to mind ˆ_ˆ
            #nchar(XP)
            #      number of important characters is 22
            for (q in 1 : 20){
                new_XP <<-  paste0(
                    substr( XP,1, 20 ),
                    (max_number_of_posts - 20 + q) ,
                    substr( XP,nchar(XP)-1, nchar(XP) ) )
                
                #   messages number
                msg_number <<- BCT %>% 
                    html_nodes(xpath = new_XP)
            
                ifelse( 
                    gsub("\\s.*", "", gsub("[[:punct:]]", "", gsub(".*ignmsgbttns", "", msg_number)) ) != "" ,
                    
                    pg <<- as.numeric( gsub("\\s.*", "", gsub("[[:punct:]]", "", gsub(".*ignmsgbttns", "", msg_number)) ) ),
                    
                    "")
                    } 
            pg
        }
        
        ifelse (
            n == last_page_number,
            my_function(),
            "") 
        

        
        nmbr_of_msg_on_lst_pg <- pg-20*(n-1)
        
        ifelse(
            n == last_page_number,
            
            class_of_posts <- names( which( table( all_classes[which(nchar(all_classes) == 22)] ) == nmbr_of_msg_on_lst_pg ) ),
            
            class_of_posts <- names( which( table( all_classes[which(nchar(all_classes) == 22)] ) == 20 ) )  
        )   
        

        
        
        #   list of authors
        authors <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.poster_info') %>% 
            html_nodes('b') %>% 
            html_text()  
        #authors[1]
        
        
        
        #   list of posts
        post <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.post') %>% 
            html_text()  
        #post[20]
        
        
        post1 <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.post') 
        
        result <- list()
         
        
        
        for(z in 1:nmbr_of_msg_on_lst_pg) {
            result[z] <- grepl("Quote", post1[z])
        }
        nmbr <-  which(result == TRUE)
        
        #remove quotes 
        # for(i in nmbr) {
        #     post[i] <- gsub(".*\n</div>|</div>.*", "", post1[i])
        # }
        
        
        #   extracting post info
        for(w in nmbr) {
            pos <- as.numeric( gregexpr(pattern ='</div>', as.character( post1[w] ) )[[1]] )
            post[w] <- substr(as.character( post1[w] ),pos[length(pos)-1], pos[length(pos)] )
        }
        
        
        #   list of posts'dates
        post_date <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.td_headerandpost') %>% 
            html_nodes('.smalltext') %>%
            html_text()  
        #post_date[3]
        
        #   list of users's stats -> name
        user_name <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.poster_info') %>%
            html_nodes('b') %>%
            html_text()  
        #user_name[2]
        
        
        #   list of users's stats - Activity
        user_activity <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.poster_info') %>%
            html_nodes('div.smalltext') %>%
            html_text()  
        #user_activity[2]
        
        user_activity <- gsub(".*Activity:", "", user_activity)
        user_activity <- gsub("\n.*", "",  user_activity )
        user_activity <- gsub("[[:space:]]", "", user_activity)
        user_activity <- as.numeric(user_activity)
        #user_activity
        
        
        
        #   list of users's stats -> Rank
        user_rank <- BCT %>% 
            html_nodes(paste0('.',class_of_posts)) %>% 
            html_nodes('.poster_info') %>%
            html_nodes('div.smalltext') %>%
            html_text()  
        #user_rank[2]
        
        user_rank <- gsub("*\t", "", user_rank)
        user_rank <- gsub("*\n", "", user_rank)
        user_rank <- gsub("Activity:.*", "", user_rank)
        user_rank <- gsub(".{3}line", "", user_rank)
        user_rank <- gsub("[[:space:]]", "", user_rank)
        #user_rank
        
        
        inter <- cbind(authors, post_date, post, user_rank, user_activity)
        DF <- rbind(DF, inter)
        
        print( paste0( n , ' page(s) parsed  ', ' out of ', last_page_number,' ', date() ) ) 
}

#write.csv2(DF, file = "BCT_parsing.csv")


DF <- DF[!is.na(DF$post_date),]
DF$post_date <- mdy_hms(DF$post_date)

DF$Month_ <- as.Date(cut(DF$post_date,
                         breaks = "month"))
For_plotting <- DF %>% 
    #filter(user_rank != "Newbie") %>% 
    #filter(user_rank != "Member") %>%
    #group_by(Month_) %>% 
    group_by(Month_, user_rank) %>% 
    
    summarise(count = n()) 

library(ggplot2)
library(scales)


####    Plot for popularity tracking
pop <- ggplot(For_plotting, aes( Month_, count, fill = user_rank)) + 
    stat_summary(fun.y = sum, geom = "bar", alpha = 0.7) + # adds up all observations for the month
    scale_x_date( labels = date_format("%Y-%m"), breaks = "1 month") +
    theme(
        plot.title = element_text(color="#993333", size=14, face="bold.italic"),
        axis.title.x = element_text(color="#993333", size=14, face="bold"),
        axis.title.y = element_text(color="#993333", size=14, face="bold"),
        axis.text.x = element_text(angle = 30, hjust = 1)
        #legend.position="none"
    ) +
    xlab("Date") +
    ylab("Number of posts") +
    ggtitle("Number of posts by month") 
pop

####    Plot for pie chart of different members types

For_pie <- DF %>% 
    #filter(user_rank != "Newbie") %>% 
    #filter(user_rank != "Member") %>%
    group_by(user_rank) %>% 
    summarise(count = n()) %>% 
    mutate(per = round(count/sum(count)*100,1) ) %>% 
    arrange(desc(per))

suppressPackageStartupMessages(library("ggthemes"))

bar <- ggplot(For_pie, aes(user_rank, count, fill = user_rank)) + 
    geom_bar(stat = "identity", alpha = 0.65) +
    theme(
        plot.title = element_text(color="#993333", size=14, face="bold.italic"),
        axis.title.x = element_text(color="#993333", size=14, face="bold"),
        axis.title.y = element_text(color="#993333", size=14, face="bold"),
        axis.text.x = element_text(angle = 30, hjust = 1),
        legend.position="none"
    ) +
    xlab("Member status") +
    ylab("Number of posts") +
    ggtitle("Number of posts by user status") 
    # theme_few()
bar


#   tutorial how to build graph by monts/weeks
#   https://www.r-bloggers.com/plot-weekly-or-monthly-totals-in-r/



####    Summary of the thread

topic_starter <- as.character(DF$authors[[1]])

brief_summary <- DF %>%
    group_by(authors, user_rank) %>%
    summarise( n = n(), share = round(n/nrow(DF)*100,1)) %>% 
    arrange(desc(n)) %>% 
    head (10)

print( 
    strsplit(
        paste0( 
            ' The topic was created on ', DF$post_date[1],
            '\n',
            ' There are ', last_page_number, ' pages in the thread.',
            '\n',
            ' The topic was viewed ', round(number_of_views/1e3,1), 'k times.',
            ' The number of views per page is ', round( round(number_of_views/1e3,1)/last_page_number , 1), 'k .',
            '\n',
            ' The topic starter -> ', topic_starter, '  contributed the thread with ', as.numeric( table(DF$authors) [topic_starter]), ' posts.',
            ' This is ~', round(as.numeric( table(DF$authors) [topic_starter])/max_number_of_posts,1)*100, '% of all posts in the thread.',
            '\n',
            ' Top 10 users by number of comments in the thread provided ', sum(brief_summary$share), '% of all comments.'
            )
    , '\n')
)

DF %>%
    group_by(authors, user_rank) %>%
    summarise( n = n(), share = round(n/nrow(DF)*100,1)) %>% 
    arrange(desc(n)) %>% 
    head (10)



















####   Cleaning DF

#convert to number
DF$user_activity <- as.numeric(DF$user_activity)
DF$post <- as.character(DF$post)
DF$post <-   gsub("\n", "",  DF$post)
DF$post <-   gsub("<br>", "", DF$post)
DF$post <-   gsub("\u0092", "'", DF$post)

DF$post <-   gsub("\u0085", "", DF$post)
DF$post <-   gsub("\u0095", "", DF$post)

DF$post <-   gsub("\u0096", "-", DF$post)
DF$post <-   gsub("<", "", DF$post)
DF$post <-   gsub("</div>", "", DF$post)

#remove punctuation
DF$post <-   gsub('[[:punct:] ]+',' ', DF$post)
DF$post <-   gsub('[[:digit:]]',' ', DF$post)

#write.csv2(DF, file = "BCT_parsing.csv")

#DF$post[28]



####    NLP

library(rlist)
library(tidytext)
library(stringr)

nrc <- get_sentiments("nrc")
afinn <- get_sentiments("afinn")


# re-adjust score

afinn$score[afinn$word == 'scam'] <- -5
afinn$score[afinn$word == 'fake'] <- -4
afinn$score[afinn$word == 'risk'] <- -4

# DF <- DF %>% 
#     filter(DF$user_rank != "Newbie")


Words_ <- strsplit(DF$post, " ")
Words_ <- unlist(Words_)
Words_ <- tolower(Words_)
#Words_

df <- list()



# VERY time consuming coptutation, need to rework
for ( i in 1 : length (Words_) ) {
    if ( nchar (Words_[i]) > 2 )  df <- c(df, Words_[i] )
}


df <- unlist(df)
info <- table(df)
info <- as.data.frame(info)
colnames(info)[1] <- "word"
info$word <- as.character(info$word)
info$word <- as.character( gsub("[[:blank:]]" , "", info$word) )


mood <- info %>%
    inner_join(afinn) %>% 
    group_by(word) %>% 
    mutate(BigScore = Freq * score) %>% 
    arrange( desc(BigScore) ) %>% 
    filter(Freq > 5)


info %>%
    inner_join(afinn) %>% 
    group_by(word) %>% 
    mutate(BigScore = Freq * score) %>% 
    arrange( BigScore ) 

#info$word[892] %in% afinn$word


 
# print(
#     paste0(
#         'Attitude score is: ', round( sum(mood$BigScore)/max_number_of_posts , 1)
#     )
# )



# visualize the attitude
library(ggplot2)

ggplot(mood, aes(Freq, BigScore, fill = score)) +
    geom_col(show.legend = TRUE, width = 0.07) +
    theme(
        axis.text=element_text(size=12),
        plot.title = element_text(color="#993333", size=14, face="bold.italic"),
        axis.title.x = element_text(color="#993333", size=14, face="bold"),
        axis.title.y = element_text(color="#993333", size=14, face="bold")
    ) +
    scale_fill_gradient(low ="red", high ="green") +
    xlab("Frequency of word") +
    ylab("Aggregated attitude score") +
    ggtitle(paste0("Community attitude toward", " Jinbi", " project") ) +
    labs(fill="Word score") +
    scale_x_continuous(trans='log2') 

    #facet_wrap(~score, ncol = 2, scales = "free_x")




##  Creating plots for positive and negative words

# positive words
pos <- info %>%
    inner_join(get_sentiments("bing")) %>% 
    group_by(word) %>%
    arrange(desc(Freq)) %>% 
    filter(Freq > 10 && sentiment == "positive") %>% 
    head(30)

# negative words
neg <- info %>%
    inner_join(get_sentiments("bing")) %>% 
    group_by(word) %>%
    arrange(desc(Freq)) %>% 
    filter(Freq > 10 && sentiment == "negative") %>% 
    head(30)

# change axis limit to max of both
limt <-  ifelse( max(pos$Freq) > max(neg$Freq), max(pos$Freq) , max(neg$Freq))


##  Plotting

p_w <- ggplot(pos, aes(reorder(word, Freq), Freq)) + 
    geom_bar(stat = "identity", fill = "#13f72e", alpha = 0.75) + 
    theme(
        plot.title = element_text(color="#993333", size=14, face="bold.italic"),
        axis.title.x = element_text(color="#993333", size=14, face="bold"),
        axis.title.y = element_text(color="#993333", size=14, face="bold"),
        legend.position="none"
    ) +
    xlab("") +
    ylab("Number of appearences") +
    ggtitle("Positive words") +
    scale_y_continuous(limits = c(0,limt*1.1))  +
    geom_text(aes(label = Freq), size = 4, hjust=-0.1) +
    coord_flip()

n_w <- ggplot(neg, aes(reorder(word, Freq), Freq))+ 
    geom_bar(stat = "identity", fill = "#f91332", alpha = 0.85) + 
    theme(
        plot.title = element_text(color="#993333", size=14, face="bold.italic"),
        axis.title.x = element_text(color="#993333", size=14, face="bold"),
        axis.title.y = element_text(color="#993333", size=14, face="bold"),
        legend.position="none"
    ) +
    xlab("") +
    ylab("Number of appearences") +
    ggtitle("Negative words") +
    scale_y_continuous(limits = c(0,limt*1.1))  +
    geom_text(aes(label = Freq), size = 4, hjust=-0.1) +
    coord_flip()

# arrage two plots side by side
library(gridExtra)
grid.arrange(p_w, n_w, ncol = 2)



print(
    paste0(
        'Number of appearences of word SCAM '
    )
)

table(info$word == 'scam')
